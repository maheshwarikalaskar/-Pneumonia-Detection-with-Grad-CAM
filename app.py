# -*- coding: utf-8 -*-
"""pneumonia app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PJG8BqutDoncxrgEIe14CMKg7bqV_M_9
"""

import streamlit as st
import numpy as np
import tensorflow as tf
import cv2
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import load_model
from PIL import Image
import os

st.set_page_config(page_title="Pneumonia Detection", layout="centered")
st.title("ü©∫ Pneumonia Detection with Grad-CAM")

@st.cache_resource
def load_cnn_model():
    model = load_model("pneumonia_cnn_model.h5")
    # Fix: Build the model by calling it once with dummy input
    model(np.zeros((1, 150, 150, 3)))

    return model

model = load_cnn_model()

def preprocess_img(img):
    img = img.resize((150, 150))
    img_array = image.img_to_array(img) / 255.0
    return np.expand_dims(img_array, axis=0)

def make_gradcam_heatmap(img_array, model, last_conv_layer_name="conv2d_2"):
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]
    )

    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(img_array)
        loss = predictions[:, 0]

    grads = tape.gradient(loss, conv_outputs)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
    conv_outputs = conv_outputs[0]
    heatmap = conv_outputs @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
    return heatmap.numpy()

def overlay_heatmap(img, heatmap, alpha=0.4):
    heatmap = cv2.resize(heatmap, (img.width, img.height))
    heatmap = np.uint8(255 * heatmap)
    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)
    superimposed_img = cv2.addWeighted(np.array(img), 1 - alpha, heatmap, alpha, 0)
    return superimposed_img

uploaded_file = st.file_uploader("Upload Chest X-ray Image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="Uploaded X-ray", use_column_width=True)

    img_array = preprocess_img(img)
    prediction = model.predict(img_array)
    label = "PNEUMONIA" if prediction[0][0] > 0.5 else "NORMAL"
    confidence = prediction[0][0]

    st.subheader(f"Prediction: {label}")
    st.text(f"Confidence: {confidence:.2f}")

    # Force model to build if it hasn't been called yet
    model(np.zeros((1, 150, 150, 3)))


    heatmap = make_gradcam_heatmap(img_array, model)

    cam_img = overlay_heatmap(img, heatmap)

    st.subheader("üîç Grad-CAM Visualization")
    st.image(cam_img, caption="Grad-CAM", use_container_width=True)
else:
    st.info("Please upload a chest X-ray image.")